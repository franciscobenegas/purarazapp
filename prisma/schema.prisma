// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 relationMode = "prisma"
}


enum Rol {
  PEON
  ADMIN
}

enum Sexo {
  Macho
  Hembra
}

enum Edad {
  RecienNacido
  Adulto
  Joven
}

enum Pelaje {
  Negro
  Colorado
  Blanco
  Bayo
  Barcino
  Overo
  Hosco
  Pampa
}


model Usuario{
  id              String    @id @default(uuid())
  email           String @unique
  username        String @unique
  password        String
  establesimiento String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  rol             Rol @default(ADMIN)
  activo          Boolean @default(true)
  
  @@index([establesimiento])
}

model Estancia{
  id               String    @id @default(uuid())
  nombre           String
  departamento     String
  distrito         String
  localidad        String
  ruc              String
  telefono         String
  usuario          String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime   @updatedAt
  propietario      Propietario[]
  establesimiento String

   @@index([establesimiento])
   @@index([departamento])
}

model Propietario{
  id              String    @id @default(uuid())
  nombre          String
  email           String
  telefono        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  usuario         String
  estanciaId      String
  estancia        Estancia? @relation(fields: [estanciaId], references: [id], onDelete: Cascade )
  establesimiento String
  mortandades     Mortandad[]
  nacimiento      Nacimiento[]

  @@index([estanciaId])
  @@index([establesimiento])
}


model Categoria{
   id                 String    @id @default(uuid())
   nombre             String
   sexo               Sexo
   edad               Edad
   promedioKilos      Int
   precioVentaCabeza  Int
   precioVentaKilo    Int
   precioCostoCabeza  Int
   precioCostoKilo    Int
   usuario            String
   establesimiento    String
   createdAt          DateTime    @default(now())
   updatedAt          DateTime   @updatedAt
   mortandades        Mortandad[] // <-- Esta es la relación inversa
   cantidad           Int?

   @@index([establesimiento])
}

model TipoRaza{
  id              String    @id @default(uuid())
  nombre          String
  establesimiento String
  usuario         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([establesimiento])
}

model CausaMortandad{
  id              String    @id @default(uuid())
  nombre          String
  establesimiento String
  usuario         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime   @updatedAt
  mortandades     Mortandad[] // <-- Esta es la relación inversa

  @@index([establesimiento])
}

model MotivoPesaje{
  id               String    @id @default(uuid())
  nombre          String
  establesimiento String
  usuario         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([establesimiento])
}

model MotivoEntrada{
  id              String    @id @default(uuid())
  nombre          String
  establesimiento String
  usuario         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([establesimiento])
}

model MotivoSalida{
  id              String    @id @default(uuid())
  nombre          String
  establesimiento String
  usuario         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([establesimiento])
}

model Potrero{
  id              String    @id @default(uuid())
  nombre          String
  establesimiento String
  usuario         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime   @updatedAt
  mortandades     Mortandad[] 
  nacimiento      Nacimiento[]

  @@index([establesimiento])
}



model Mortandad {
  id              String           @id @default(uuid())
  fecha           DateTime
  propietarioId   String
  propietario     Propietario      @relation(fields: [propietarioId], references: [id])
  numeroAnimal    String           // Caravana
  categoriaId     String
  categoria       Categoria        @relation(fields: [categoriaId], references: [id])
  causaId         String
  causa           CausaMortandad   @relation(fields: [causaId], references: [id])
  potreroId       String
  potrero         Potrero          @relation(fields: [potreroId], references: [id])
  ubicacionGps    String
  foto1           String?          // URL o ruta de imagen
  foto2           String?
  foto3           String?
  usuario         String
  establesimiento String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([establesimiento])
  @@index([fecha])
  @@index([propietarioId])
  @@index([categoriaId])
  @@index([causaId])
  @@index([potreroId])
}


model Auditoria {
  id          String   @id @default(uuid())
  tabla       String
  registroId  String
  accion      String   // CREATE, UPDATE, DELETE
  oldValues   Json?
  newValues   Json?
  usuarioId   String
  createdAt   DateTime @default(now())
}

model Nacimiento{
  id              String           @id @default(uuid())
  fecha           DateTime
  numeroVaca      String?
  numeroTernero   String?
  propietarioId   String
  propietario     Propietario      @relation(fields: [propietarioId], references: [id])
  potreroId       String
  potrero         Potrero          @relation(fields: [potreroId], references: [id])
  sexo            Sexo
  peso            Int?
  pelaje          Pelaje
  usuario         String
  establesimiento String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([propietarioId])
  @@index([potreroId])

}



